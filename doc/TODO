This is a sort of unordered roadmap for Pez.

NOW (1.6.0 release)

* Finish up missing pieces of ffi: and load-lib.

* Finish up the socket library, now that structs are solidified.

* Use flags in the interpreter struct instead of #define's for features
  to support or disallow.  The basics have been set up, but are not
  implemented.

* Restructure the dictionary, so that flags are no longer stored in the
  first byte of the name field, and so that file:line are included in entries.

* Finalize the API for a Pez interpreter instantiated by another Pez
  program, so that the above-mentioned jailing of sub-pez's makes sense.

* gsub

* Clean up command-line parsing!

* Fix up size limiting.

ONGOING

* Misc cleanup

* Include more batteries.  Flesh out the standard library.

LATER

* Serialization of the dictionary/code/etc.
	* I expect text to be easier than binary images.
	* Also, do both if possible.

* Maybe get rid of the case-insensitivity and turn everything lower-case;
  depends on how much of a pain that turns out to be.

* Bolt down the security model.

* Tweak the I/O so that interpreter-generated messages can be sent, through a
  pipe or arbitrary FD (as opposed to talking to stderr, etc., directly), so
  that the UI can be interacted with.

* Mailboxes for communicating between Pez instances, when a concurrency model
  is implemented.

* Look into separating the float stack from the data stack, as some
  implementations do; this would greatly simplify things, and shouldn't break
  existing code if written portably per the current rules.  It should also
  speed Pez up a bit.

MUCH LATER

* Investigate a few key optimizations, as I'm planning on using Pez as a VM
  language, especially for Roboto.

* Along those lines, there are a few Roboto features that may be pushed down to
  Pez, although this will only happen where it does not interfere with Pez as a
  general-purpose standalone language or embedded scripting language.

